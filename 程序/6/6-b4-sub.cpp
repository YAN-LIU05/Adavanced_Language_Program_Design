/* 2352018 信06 刘彦 */

#include <cstdio>   //NULL
//不再允许包含任何系统头文件

/* ----- 不允许定义任何形式的全局变量/全部数组/只读全局变量/宏定义!!!!! ----- */

/* 函数实现部分，{ }内的东西可以任意调整，目前的return只是一个示例，可改变 */
/***************************************************************************
  函数名称：
  功    能：求字符串str的长度
  输入参数：
  返 回 值：字符串长度
  说    明：
***************************************************************************/
int tj_strlen(const char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int length = 0;
    if (str == NULL) 
    {
        return 0;
    }

    while (*str != '\0') 
    { 
        length++;           
        str++;              
    }

    return length; 
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2追加到s1后面,含\0
  输入参数：
  返 回 值：新的s1
  说    明：
***************************************************************************/
char *tj_strcat(char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2 == NULL)
    {
        return s1;
    }

    char *end = s1;
    while (*end) 
    {
        end++;
    }

    while (*s2) 
    {
        *end = *s2;
        end++;
        s2++;
    }
    *end = '\0';

    return s1;
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2的前1en个字符追加到s1后面,并添加\0,若1en比s2的长度大,则追加整个s2即可(含\0)
  输入参数：
  返 回 值：新的s1
  说    明：
***************************************************************************/
char *tj_strncat(char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2 == NULL)
    {
        return s1;
    }

    char *end = s1;
    while (*end) 
    {
        end++;
    }

    int count = 0;
    while ((*s2 != '\0') && (count < len)) 
    {
        *end = *s2;
        end++;
        s2++;
        count++;
    }

    *end = '\0';

    return s1;
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2复制到s1中,覆盖s1中原内容,复制时包含\0
  输入参数：
  返 回 值：新的s1
  说    明：
***************************************************************************/
char *tj_strcpy(char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL)
    {
        return s1;
    }

    char *s = s1;

    if (s2 == NULL)
    {
        *s = '\0';
    }
    else
    {
        for (; *s2 != '\0'; s++, s2++)
        {
            *s = *s2;
        }
        *s = '\0';
    }

    return s1;
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2的前1en个字符复制到s1中,复制时不含\0,若1en比s2的长度大,复制s2长度个字符即可(不含\0)
  输入参数：
  返 回 值：新的s1
  说    明：
***************************************************************************/
char *tj_strncpy(char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2 == NULL)
    {
        return s1;
    }

    char *s_1 = s1;
    const char *s_2 = s2 + len;
    if (len > tj_strlen(s2) + 1)
    {
        while (*s2 != '\0')
        {
            *s_1 = *s2;
            s_1++;
            s2++;
        }
    }
    else
    {
        while (s2 < s_2)
        {
            *s_1 = *s2;
            s_1++;
            s2++;
        }
    }
    return s1;
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2的大小,英文字母要区分大小写
  输入参数：
  返 回 值：相等为0,不等则为第1个不相等字符的ASCII差值
  说    明：
***************************************************************************/
int tj_strcmp(const char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2 == NULL)
    {
        int t = (s1 != NULL) - (s2 != NULL);
        return t;
    }

    while (*s1 && (*s1 == *s2)) 
    {
        s1++;
        s2++;
    }
    
    return *s1 - *s2;
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2的大小,英文字母不分大小写
  输入参数：
  返 回 值：相等为0,不等则为第1个不相等字符的ASCII差值
  说    明：
***************************************************************************/
int tj_strcasecmp(const char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2 == NULL)
    {
        int t = (s1 != NULL) - (s2 != NULL);
        return t;
    }
    char s_1, s_2;
    while (1) 
    {
        if (*s1 >= 'A' && *s1 <= 'Z')
        {
            s_1 = *s1 + 'a' - 'A';
        }
        else
        {
            s_1 = *s1;
        }
        if (*s2 >= 'A' && *s2 <= 'Z')
        {
            s_2 = *s2 + 'a' - 'A';
        }
        else
        {
            s_2 = *s2;
        }
        if (s_1 == s_2) 
        {
            if (s_1 == '\0')
                break;
            s1++;
            s2++;
        }
        else 
        {
            break;
        }
    }
    return s_1 - s_2;
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2的前1en个字符的大小,英文字母要区分大小写,若1en大于s1/s2中长度短的串,则比较到短串的\0即结束
  输入参数：
  返 回 值：相等为0,不等则为第1个不相等字符的ASCII差值
  说    明：
***************************************************************************/
int tj_strncmp(const char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2 == NULL)
    {
        int t = (s1 != NULL) - (s2 != NULL);
        return t;
    }

    int count = 0;
    while (*s1 && (*s1 == *s2) && count < len - 1)
    {
        s1++;
        s2++;
        count++;
    }
    return *s1 - *s2;
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2的前1en个字符的大小,英文字母不分大小写
  输入参数：
  返 回 值：相等为0,不等则为第1个不相等字符的ASCII差值
  说    明：
***************************************************************************/
int tj_strcasencmp(const char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == NULL || s2 == NULL)
    {
        int t = (s1 != NULL) - (s2 != NULL);
        return t;
    }

    int count = 0;
    char s_1 = 0, s_2 = 0;
    while (count < len)
    {
        if (*s1 >= 'A' && *s1 <= 'Z')
        {
            s_1 = *s1 + 'a' - 'A';
        }
        else
        {
            s_1 = *s1;
        }
        if (*s2 >= 'A' && *s2 <= 'Z')
        {
            s_2 = *s2 + 'a' - 'A';
        }
        else
        {
            s_2 = *s2;
        }

        if (s_1 != s_2 || *s1 == '\0' || *s2 == '\0' || ++count == len)
            break;
        s1++;
        s2++;
    }

    return s_1 - s_2;
}

/***************************************************************************
  函数名称：
  功    能：将字符串str中所有小写字母均转为大写,其它字符不变,转换后放在原串中
  输入参数：
  返 回 值：转换后的串
  说    明：
***************************************************************************/
char *tj_strupr(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str != NULL)
    {
        char* s = str;
        while (*s != '\0')
        {
            if (*s >= 'a' && *s <= 'z')
            {
                *s -= 'a' - 'A';
            }
            s++;
        }
    }
    return str;
}

/***************************************************************************
  函数名称：
  功    能：将字符串str中所有大写字母均转为小写,其它字符不变,转换后放在原串中
  输入参数：
  返 回 值：转换后的串
  说    明：
***************************************************************************/
char *tj_strlwr(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str != NULL)
    {
        char* s = str;
        while (*s != '\0')
        {
            if (*s >= 'A' && *s <= 'Z')
            {
                *s += 'a' - 'A';
            }
            s++;
        }
    }
    return str;
}

/***************************************************************************
  函数名称：
  功    能：在字符串 str中寻找字符ch第1次出现的位置,顺序是从左到右
  输入参数：
  返 回 值：找到:返回1-n(位置从1开始),未找到则返回0
  说    明：
***************************************************************************/
int tj_strchr(const char *str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL)
    {
        return 0;
    }

    int count = 1;
    while (*str != ch)
    {
        str++;
        count++;
        if (*str == '\0')
            return 0;
    }
    return count;
}

/***************************************************************************
  函数名称：
  功    能：在字符串 str中寻找字符串substr第1次出现的位置,顺序是从左到右
  输入参数：
  返 回 值：找到:返回1-n(位置从1开始),未找到则返回0
  说    明：
***************************************************************************/
int tj_strstr(const char *str, const char *substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL)
    {
        return 0;
    }

    int count = 0;
    while (*str != '\0')
    {
        count++;
        if (tj_strncmp(str++, substr, tj_strlen(substr)) == 0)
            return count;
    }
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：在字符串str中寻找字符ch第1次出现的位置,顺序是从右到左
  输入参数：
  返 回 值：找到:返回1-n(位置从1开始),未找到则返回0
  说    明：
***************************************************************************/
int tj_strrchr(const char *str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL)
    {
        return 0;
    }

    int count = 0; 
    const char *s = str;

    while (*s != '\0')
    {
        s++; 
        count++; 
    }
    s--; 
    while (s >= str)
    {
        if (*s == ch) 
            return count; 
        s--; 
        count--; 
    }

    return 0; 
}

/***************************************************************************
  函数名称：
  功    能：在字符串 str中寻找字符串 substr第1次出现的位置,顺序是从右到左
  输入参数：
  返 回 值：找到:返回1-n(位置从1开始),未找到则返回0
  说    明：
***************************************************************************/
int tj_strrstr(const char *str, const char *substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int count = 0;
    if (str == NULL)
    {
        return 0;
    }

    const char *s = str;

    while (*s != '\0')
    {
        s++;
        count++;
    }
    s--;
    while (s >= str)
    {
        if (tj_strncmp(s--, substr, tj_strlen(substr)) == 0)
            return count;
        count--;
    }
    
    return 0;
}

/***************************************************************************
  函数名称：
  功    能：字符串反转,放入原串中
  输入参数：
  返 回 值：反转后的串
  说    明：
***************************************************************************/
char *tj_strrev(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == NULL)
    {
        return NULL;
    }

    char *start = str;
    char *end = str;
    while (*end != '\0') 
    {
        end++; 
    }
    end--; 

    while (start < end) 
    {
        char temp = *start;
        *start = *end;
        *end = temp;
        start++;
        end--;
    }

    return str;
}
